---
- name: Prepare OS
  hosts:
    - gravity

  become: true
  gather_facts: true
  any_errors_fatal: true

  pre_tasks:
    - name: Pausing for 2 seconds...
      ansible.builtin.pause:
        seconds: 2

  handlers:
    - name: Restart smartd
      ansible.builtin.service:
        name: smartd.service
        daemon_reload: true
        enabled: true
        state: restarted

    - name: Reload systemd daemon
      ansible.builtin.systemd:
        daemon_reload: true

    - name: Update grub
      ansible.builtin.command: update-grub
      tags:
        - skip_ansible_lint

    - name: Update initramfs
      ansible.builtin.command: update-initramfs -u
      tags:
        - skip_ansible_lint

  tasks:
    # Include vars
    - name: Load vars
      ansible.builtin.include_vars:
        dir: vars
        files_matching: main.yml

    # Set locale
    - name: Set timezone
      community.general.timezone:
        name: "{{ os_timezone | default('Europe/London') }}"

    # Manage packages
    - name: Disable APT recommends
      ansible.builtin.blockinfile:
        path: /etc/apt/apt.conf.d/02norecommends
        mode: "0644"
        create: true
        block: |
          APT::Install-Recommends "false";
          APT::Install-Suggests "false";
          APT::Get::Install-Recommends "false";
          APT::Get::Install-Suggests "false";

    - name: Add apt repositories
      ansible.builtin.apt_repository:
        repo: "{{ item }}"
        update_cache: true
      loop: "{{ os_packages_repositories | default([]) }}"

    - name: Upgrade all system packages
      ansible.builtin.apt:
        upgrade: full
      register: apt_upgrade
      retries: 5
      until: apt_upgrade is success

    - name: Install required packages
      ansible.builtin.apt:
        name: "{{ os_packages_install | default([]) }}"
        install_recommends: false
      register: apt_install_common
      retries: 5
      until: apt_install_common is success

    - name: Gather installed packages
      ansible.builtin.package_facts:
        manager: auto

    - name: Remove packages
      ansible.builtin.apt:
        name: "{{ os_packages_remove | default([]) }}"
        state: absent
        autoremove: true

    # Setup networking
    - name: Set hostname to inventory hostname
      ansible.builtin.hostname:
        name: "{{ inventory_hostname }}"
      when:
        - ansible_hostname != inventory_hostname

    - name: Update /etc/hosts to include hostname
      ansible.builtin.blockinfile:
        path: /etc/hosts
        mode: "0644"
        create: true
        block: |
          127.0.0.1 localhost
          127.0.1.1 {{ inventory_hostname }}

          # The following lines are desirable for IPv6 capable hosts
          ::1 ip6-localhost ip6-loopback
          fe00::0 ip6-localnet
          ff00::0 ip6-mcastprefix
          ff02::1 ip6-allnodes
          ff02::2 ip6-allrouters

    - name: Set ping sysctl
      ansible.posix.sysctl:
        name: net.ipv4.ping_group_range
        value: "0 2147483647"
        state: present
        reload: true

    - name: Set rootfull ports for rootless user sysctl
      ansible.posix.sysctl:
        name: net.ipv4.ip_unprivileged_port_start
        value: "0"
        state: present
        reload: true

    - name: Ensure user delegate systemd directory exists
      ansible.builtin.file:
        path: /etc/systemd/system/user@.service.d
        state: directory
        mode: "0755"

    - name: Install delegate.conf for rootless users
      ansible.builtin.copy:
        src: delegate.conf
        dest: "/etc/systemd/system/user@.service.d/delegate.conf"
        mode: "0644"
      notify: Reload systemd daemon

    #
    # Configure users
    #

    # Configure localadmin
    - name: Add additional user SSH public keys
      ansible.posix.authorized_key:
        user: "{{ ansible_user }}"
        key: "{{ item }}"
      loop: "{{ os_ssh_authorized_keys | default([]) }}"

    - name: Check if hushlogin exists
      ansible.builtin.stat:
        path: "/home/{{ ansible_user }}/.hushlogin"
      register: hushlogin_status

    - name: Silence the login prompt
      ansible.builtin.file:
        dest: "/home/{{ ansible_user }}/.hushlogin"
        state: touch
        owner: "{{ ansible_user }}"
        mode: "0775"
      when:
        - not hushlogin_status.stat.exists

    - name: Add user to sudoers
      ansible.builtin.copy:
        content: "{{ ansible_user }} ALL=(ALL:ALL) NOPASSWD:ALL"
        dest: "/etc/sudoers.d/{{ ansible_user }}_nopasswd"
        mode: "0440"

    - name: Add user to users
      ansible.builtin.user:
        name: localadmin
        groups: users
        append: true
