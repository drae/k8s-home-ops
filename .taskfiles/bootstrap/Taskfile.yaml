---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

tasks:
  talos:
    desc: Bootstrap Talos
    prompt: Bootstrap Talos on the cluster... continue?
    cmds:
      - task: :talos:apply-clusterconfig
        vars:
          INSECURE: "true"
      # Wait for bootstrap to complete
      - until op=$(talosctl -n {{.TALOS_CONTROLLER}} bootstrap 2>&1 || true) && [[ "$op" == *"AlreadyExists"* ]]; do sleep 5; done
      # Get the kubeconfig
      - talosctl kubeconfig -n {{.TALOS_CONTROLLER}} --force --force-context-name darkstar {{.KUBERNETES_DIR}}/darkstar
      # Wait till we can see the node
      - until kubectl wait nodes --for=condition=Ready=False --all --timeout=10s; do sleep 5; done
      # Create flux-system ns
      - until op=$(kubectl create ns flux-system 2>&1 || true) && [[ "$op" == *"AlreadyExists"* ]]; do sleep 5; done
      # Install our encryption key
      - sops --decrypt {{.KUBERNETES_DIR}}/darkstar/components/flux/sops/age-key.sops.yaml | kubectl apply -n flux-system --server-side -f -
      # Install our crds
      - helmfile -q -f {{.KUBERNETES_DIR}}/darkstar/bootstrap/helmfile.d/helmfile-crds.yaml template | kubectl apply --server-side -f -
      # Install our initial apps
      - helmfile -q -f {{.KUBERNETES_DIR}}/darkstar/bootstrap/helmfile.d/helmfile-apps.yaml apply --skip-diff-on-install --suppress-diff
      - helmfile -q -f {{.KUBERNETES_DIR}}/darkstar/bootstrap/helmfile.d/helmfile-apps.yaml destroy --selector name=format-lvm
    preconditions:
      - which talosctl helmfile kubectl
      - test -f {{.PROJECT_DIR}}/age.key
      - test -f {{.KUBERNETES_DIR}}/darkstar/components/flux/sops/age-key.sops.yaml
      - sh: "sops --decrypt {{.KUBERNETES_DIR}}/darkstar/components/flux/sops/age-key.sops.yaml"
        msg: "Cannot decrypt flux sops key"
      - test -f {{.KUBERNETES_DIR}}/darkstar/bootstrap/helmfile.d/helmfile-crds.yaml
      - test -f {{.KUBERNETES_DIR}}/darkstar/bootstrap/helmfile.d/helmfile-apps.yaml
      - test -f {{.KUBERNETES_DIR}}/darkstar/bootstrap/helmfile.d/templates/format-lvm.yaml.gotmpl
      - test -f {{.KUBERNETES_DIR}}/darkstar/bootstrap/helmfile.d/templates/values.yaml.gotmpl
    vars:
      TALOS_CONTROLLER:
        sh: talosctl config info --output json | jq --raw-output '.endpoints[]' | shuf -n 1
