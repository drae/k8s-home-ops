---
# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Pre-pull Images

on:
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.event.number || github.ref }}
  cancel-in-progress: true

env:
  HOMEBREW_NO_ANALYTICS: "1"

jobs:
  pre-job:
    name: Image Pull - Pre-Job
    runs-on: ubuntu-latest
    outputs:
      any_changed: ${{ steps.changed-files.outputs.any_changed }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Get Changed Files
        id: changed-files
        uses: tj-actions/changed-files@2f7c5bfce28377bc069a65ba478de0a74aa0ca32 # v46
        with:
          files: kubernetes/**

  filter-changes:
    name: Filter changes
    runs-on: ubuntu-latest
    outputs:
      changed-files: ${{ steps.changed-files.outputs.filtered_files }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Get changed files
        id: changed-files
        uses: ./.github/actions/get-changed-files
        with:
          matchers: |-
            ^kubernetes/.*

  extract-images:
    if: ${{ needs.filter-changes.outputs.changed-files != '[]' }}
    name: Extract Images
    runs-on: ubuntu-latest
    needs:
      - filter-changes
    strategy:
      matrix:
        branches:
          - default
          - pull
      fail-fast: false
    outputs:
      default: ${{ steps.extract-images.outputs.default }}
      pull: ${{ steps.extract-images.outputs.pull }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: "${{ matrix.branches == 'default' && github.event.repository.default_branch || '' }}"
      - name: Gather Images
        uses: docker://ghcr.io/allenporter/flux-local:v7.2.1
        with:
          args: >-
            get cluster
            --all-namespaces
            --path /github/workspace/ubernetes/darkstar/flux/configure
            --enable-images
            --only-images
            --output json
            --output-file images.json
      - name: Extract Images
        id: extract-images
        run: |
          echo "${{ matrix.branches }}=$(jq --compact-output '.' images.json)" >> "${GITHUB_OUTPUT}"

  compare-images:
    if: ${{ needs.filter-changes.outputs.changed-files == 'true' && needs.extract-images.outputs.default != needs.extract-images.outputs.pull }}
    name: Image Pull - Compare Images
    runs-on: ubuntu-latest
    needs:
      - filter-changes
      - extract-images
    outputs:
      images: ${{ steps.compare.outputs.images }}
    steps:
      - name: Compare Images
        id: compare
        run: |
          images=$(jq --compact-output --null-input \
              --argjson f1 '${{ needs.extract-images.outputs.default }}' \
              --argjson f2 '${{ needs.extract-images.outputs.pull }}' \
              '$f2 - $f1' \
          )
          echo "images=${images}" >> $GITHUB_OUTPUT

          echo '## New images to Pull' >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          echo $images | jq >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  pre-pull-images:
    if: ${{ needs.compare-images.outputs.images != '[]' }}
    name: Pre-pull Images
    runs-on: arc-k8s-home-ops
    needs:
      - pre-job
      - compare-images
    strategy:
      matrix:
        images: ${{ fromJSON(needs.compare-images.outputs.images) }}
      max-parallel: 4
      fail-fast: false
    steps:
      - name: Install talosctl
        run: curl -fsSL https://talos.dev/install | sh
      - name: Pre-pull Image
        run: talosctl -n "$NODE_IP" image pull "${{ matrix.images }}"

  pre-pull-images-success:
    if: ${{ !cancelled() }}
    needs:
      - pre-pull-images
    name: Pre-pull Images Successful
    runs-on: ubuntu-latest
    steps:
      - name: Any jobs failed?
        if: ${{ contains(needs.*.result, 'failure') }}
        run: exit 1
      - name: All jobs passed or skipped?
        if: ${{ !(contains(needs.*.result, 'failure')) }}
        run: echo "All jobs passed or skipped" && echo "${{ toJSON(needs.*.result) }}"
